{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 8,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "LE7tFO2Vk"
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto",
          "height": 1802
        },
        "getOption": "const series = data.series.map((s) => {\n  if (s.refId == 'data') {\n    const datetime = s.fields.find((f) => f.name === 'datetime').values.buffer;\n    const open = s.fields.find((f) => f.name === 'open').values.buffer;\n    const high = s.fields.find((f) => f.name === 'high').values.buffer;\n    const low = s.fields.find((f) => f.name === 'low').values.buffer;\n    const close = s.fields.find((f) => f.name === 'close').values.buffer;\n    const volume = s.fields.find((f) => f.name === 'volume').values.buffer;\n\n    return datetime.map((d, i) => [d, open[i], close[i], low[i], high[i], volume[i]]);\n  }\n\n  if (s.refId === 'images') {\n    image = s.fields.find((f) => f.name === 'image_svgxml').values.buffer;\n    stock_symbol = s.fields.find((f) => f.name === 'stock_symbol').values.buffer;\n    stock_name = s.fields.find((f) => f.name === 'stock_name').values.buffer;\n    scaleX = s.fields.find((f) => f.name === 'scalex').values.buffer;\n    scaleY = s.fields.find((f) => f.name === 'scaley').values.buffer;\n  }\n\n})[0];\n\nconsole.log(series.map((arr) => arr[0]));\n\nreturn {\n  legend: {\n    show: false,\n  },\n  tooltip: {\n    triggerOn: 'none',\n    transitionDuration: 0,\n    confine: true,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: '#333',\n    backgroundColor: 'rgba(255,255,255,0.9)',\n    textStyle: {\n      fontSize: 12,\n      color: '#333'\n    },\n    position: function (pos, params, el, elRect, size) {\n      const obj = {\n        top: 60\n      };\n      obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\n      return obj;\n    }\n  },\n  animation: true,\n  // color: colorList,\n  tooltip: {\n    triggerOn: 'none',\n    transitionDuration: 0,\n    confine: true,\n    borderRadius: 4,\n    borderWidth: 1,\n    borderColor: '#333',\n    backgroundColor: 'rgba(255,250,250,0.9)',\n    textStyle: {\n      fontSize: 18,\n      color: '#333'\n    },\n\n  },\n  axisPointer: {\n    link: [\n      {\n        xAxisIndex: [0, 1]\n      }\n    ]\n  },\n  dataZoom: [\n    {\n      type: 'slider',\n      xAxisIndex: [0, 1],\n      realtime: false,\n      top: 65,\n      height: 20,\n      handleSize: '170%'\n    },\n  ],\n  xAxis: [\n    {\n      type: 'time',\n      boundaryGap: true,\n      min: 'dataMin',\n      max: 'dataMax',\n      axisPointer: {\n        show: true\n      }\n    },\n    {\n      type: 'time',\n      gridIndex: 1,\n      boundaryGap: false,\n      splitLine: { show: false },\n      axisLabel: { show: false },\n      axisTick: { show: false },\n      axisLine: { lineStyle: { color: '#777' } },\n      min: 'dataMin',\n      max: 'dataMax',\n      axisPointer: {\n        type: 'shadow',\n        label: { show: false },\n        triggerTooltip: true,\n        handle: {\n          show: true,\n          margin: 30,\n          color: '#0000a0'\n        }\n      }\n    }\n  ],\n  yAxis: [\n    {\n      scale: true,\n      splitNumber: 2,\n      axisLine: { lineStyle: { color: '#777' } },\n      splitLine: { show: true },\n      axisTick: { show: false },\n      axisLabel: {\n        inside: true,\n        formatter: '{value}\\n'\n      }\n    },\n    {\n      scale: true,\n      gridIndex: 1,\n      splitNumber: 2,\n      axisLabel: { show: false },\n      axisLine: { show: false },\n      axisTick: { show: false },\n      splitLine: { show: false }\n    }\n  ],\n  grid: [\n    {\n      left: 20,\n      right: 20,\n      top: 110,\n      height: 120\n    },\n    {\n      left: 20,\n      right: 20,\n      height: 40,\n      top: 260\n    }\n  ],\n  graphic: [//stock_symbol\n    {\n      type: 'image',\n      y: 10,\n      scaleX: scaleX[0],\n      scaleY: scaleY[0],\n      right: 130,\n      z: 0,\n      style: {\n         image: 'data:image/svg+xml;utf8,' + image[0],\n      }\n    }\n  ],\n  series: [\n    {\n      name: 'Volume',\n      type: 'bar',\n      xAxisIndex: 1,\n      yAxisIndex: 1,\n      itemStyle: {\n        color: '#0000a0',\n      },\n      emphasis: {\n        itemStyle: {\n        }\n      },\n      data: series.map((arr) => [arr[0], arr[5]]),\n    },\n    {\n      type: 'candlestick',\n      data: series.map((arr) => [arr[0], arr[1], arr[2], arr[3], arr[4]]),\n      itemStyle: {\n        color: '#ff5656',\n        color0: '#0000a0',\n        borderColor: '#ff5656',\n        borderColor0: '#0000a0'\n      },\n      emphasis: {\n        itemStyle: {\n          color: 'black',\n          color0: '#444',\n          borderColor: 'black',\n          borderColor0: '#444'\n        }\n      }\n    },\n  ]\n};",
        "map": "json",
        "renderer": "canvas"
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "LE7tFO2Vk"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT $var_dt as datetime, open, high, low, close, volume, stock_symbol\nFROM $var_granularity where stock_symbol = '$var_stock_symbol'\n and $var_dt::date <= '2023-01-07';",
          "refId": "data",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "LE7tFO2Vk"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT image_svgxml, scaleX as scalex, scaleY as scaley, stock_symbol, stock_name FROM stock_image \nwhere stock_symbol = '$var_stock_symbol';",
          "refId": "images",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "image_svgxml",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "stock_symbol",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              },
              {
                "parameters": [
                  {
                    "name": "stock_name",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "stock_image"
        }
      ],
      "title": "$var_stock_symbol",
      "type": "volkovlabs-echarts-panel"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "AMZN",
          "value": "AMZN"
        },
        "datasource": {
          "type": "postgres",
          "uid": "LE7tFO2Vk"
        },
        "definition": "SELECT distinct stock_symbol from stock_image;",
        "hide": 0,
        "includeAll": false,
        "label": "Symbol",
        "multi": false,
        "name": "var_stock_symbol",
        "options": [],
        "query": "SELECT distinct stock_symbol from stock_image;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "stocks:stocks",
          "value": "stocks:stocks"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Granularity",
        "multi": false,
        "name": "var_granularity",
        "options": [
          {
            "selected": true,
            "text": "5min",
            "value": "stocks"
          },
          {
            "selected": false,
            "text": "1hour",
            "value": "one_hour_candle"
          }
        ],
        "query": "5min : stocks, 1hour : one_hour_candle",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "bucket",
          "value": "bucket"
        },
        "datasource": {
          "type": "postgres",
          "uid": "LE7tFO2Vk"
        },
        "definition": "select case when '$var_granularity' = 'stocks' then 'datetime' else 'bucket' end;",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "var_dt",
        "options": [],
        "query": "select case when '$var_granularity' = 'stocks' then 'datetime' else 'bucket' end;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Twelve",
  "uid": "a5rFsShVz",
  "version": 64,
  "weekStart": ""
}
